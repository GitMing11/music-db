// 이것은 당신의 Prisma 스키마 파일입니다,
// 자세한 내용은 문서에서 확인하세요: https://pris.ly/d/prisma-schema

// 쿼리를 더 빠르게 하거나 서버리스 또는 엣지 함수와 쉽게 확장하는 방법을 찾고 계신가요?
// Prisma Accelerate를 시도해 보세요: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 간단한 관계: @relation("") 사용 (대부분의 경우)
// 복잡한 관계/외래 키 조정: @relation(fields: [], references: []) 사용

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  genres    Genre[]  @relation("UserGenres")
  likes     Like[]
  playlists Playlist[]
}

model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("UserGenres")
}

model Track {
  id            String      @id @default(cuid())
  name          String       // 트랙 이름
  imageUrl      String       // 이미지 URL
  spotifyUrl    String       // Spotify 링크
  artistName    String       // 아티스트 이름
  albumName     String       // 앨범 이름
  releaseDate   DateTime     // 발매일
  isLiked       Boolean      @default(false) // 좋아요 여부
  createdAt     DateTime     @default(now()) // 생성일
  updatedAt     DateTime     @updatedAt // 수정일
  likes         Like[]       // 사용자가 좋아요한 기록
  playlistTracks PlaylistTrack[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  trackId   String
  likedAt   DateTime @default(now()) // 좋아요 날짜
  track     Track    @relation(fields: [trackId], references: [id]) // 트랙과의 관계
  user User @relation(fields: [userId], references: [id]) // 사용자와의 관계
  @@unique([userId, trackId])
}

model Playlist {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  tracks    PlaylistTrack[]
  
}

model PlaylistTrack {
  id         Int      @id @default(autoincrement())
  userId     Int?     // 선택적 필드로 변경
  playlistId Int
  trackId    String
  addedAt    DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  track      Track    @relation(fields: [trackId], references: [id])
  @@index([playlistId, trackId]) // 복합 인덱스 추가
}


model Artist {
  id        Int     @id @default(autoincrement())
  artist_id String  @unique
  name      String
  image_url String?
}
